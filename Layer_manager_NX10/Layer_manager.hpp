//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\jie\Documents\Example\application\Layer_manager.hpp
//
//        This file was generated by the NX Block Styler
//        Created by: jie
//              Version: NX 10
//              Date: 06-14-2016  (Format: mm-dd-yyyy)
//              Time: 20:24
//
//==============================================================================

#ifndef LAYER_MANAGER_H_INCLUDED
#define LAYER_MANAGER_H_INCLUDED

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <uf_ui_types.h>
#include <iostream>
#include <NXOpen/Session.hxx>
#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXException.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_BlockDialog.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>
#include <NXOpen/BlockStyler_Group.hxx>
#include <NXOpen/BlockStyler_Button.hxx>

#include <NXOpen/Annotations_AnnotationManager.hxx>
#include <NXOpen/Annotations_BalloonNote.hxx>
#include <NXOpen/Annotations_CenterlineCollection.hxx>
#include <NXOpen/Annotations_Centerline3d.hxx>
#include <NXOpen/Annotations_CoordinateNote.hxx>
#include <NXOpen/Annotations_CuttingPlaneSymbol.hxx>
#include <NXOpen/Annotations_DatumTarget.hxx>
#include <NXOpen/Annotations_DatumTargetCollection.hxx>
#include <NXOpen/Annotations_Gdt.hxx>
#include <NXOpen/Annotations_GdtCollection.hxx>
#include <NXOpen/Annotations_GdtDatumCollection.hxx>
#include <NXOpen/Annotations_Label.hxx>
#include <NXOpen/Annotations_LabelCollection.hxx>
#include <NXOpen/Annotations_LightweightSection.hxx>
#include <NXOpen/Annotations_LightweightSectionBuilder.hxx>
#include <NXOpen/Annotations_NoteCollection.hxx>
#include <NXOpen/Annotations_Pmi.hxx>
#include <NXOpen/Annotations_PmiAttributeCollection.hxx>
#include <NXOpen/Annotations_PmiAttribute.hxx>
#include <NXOpen/Annotations_PmiCenterline3d.hxx>
#include <NXOpen/Annotations_PmiCollection.hxx>
#include <NXOpen/Annotations_PmiLightweightSectionCollection.hxx>
#include <NXOpen/Annotations_PmiManager.hxx>
#include <NXOpen/Annotations_PmiNote.hxx>
#include <NXOpen/Annotations_SurfaceFinish.hxx>
#include <NXOpen/Annotations_WeldCollection.hxx>
#include <NXOpen/Annotations_Weld.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/CartesianCoordinateSystem.hxx>
#include <NXOpen/Features_DatumCsys.hxx>
#include <NXOpen/Features_DatumFeature.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/Features_FeatureCollection.hxx>
#include <NXOpen/Layer_Category.hxx>
#include <NXOpen/Layer_CategoryCollection.hxx>
#include <NXOpen/Layer_LayerManager.hxx>
#include <NXOpen/ModelingView.hxx>
#include <NXOpen/ModelingViewCollection.hxx>
#include <NXOpen/Routing_SplineSegmentCollection.hxx>
#include <NXOpen/Routing_SplineSegment.hxx>
#include <NXOpen/Routing_LineSegmentCollection.hxx>
#include <NXOpen/Routing_LineSegment.hxx>
#include <NXOpen/Routing_ArcSegmentCollection.hxx>
#include <NXOpen/Routing_ArcSegment.hxx>
#include <NXOpen/Routing_Anchor.hxx>
#include <NXOpen/Routing_AnchorCollection.hxx>
#include <NXOpen/Routing_BendCorner.hxx>
#include <NXOpen/Routing_BendCornerCollection.hxx>
#include <NXOpen/Routing_RouteManager.hxx>
#include <NXOpen/Part.hxx>
#include <NXOpen/PartCollection.hxx>
#include <NXOpen/Point.hxx>
#include <NXOpen/PointCollection.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOPEN/ListingWindow.hxx>
#include <NXOPEN/View.hxx>
#include <NXOPEN/ViewCollection.hxx>

#include <uf.h>
#include <uf_ui.h>
#include <uf_object_types.h>
#include <uf_obj.h>
#include <uf_part.h>
#include <uf_modl.h>
#include <uf_layer.h>

#include <windows.h>
#undef CreateDialog

//Solid body
#define NAME_SOLID_BODY							"SOLID BODY"
#define DESCRIPTION_SOLID_BODY					"Layers for solid body"
#define LAYER_SOLID_BODY						1
//Sheet body
#define NAME_SHEET_BODY							"SHEET BODY"
#define DESCRIPTION_SHEET_BODY					"Layers for sheet body"
#define LAYER_SHEET_BODY						101
//Datum
#define NAME_DATUM								"DATUM"
#define DESCRIPTION_DATUM						"Layers for datum"
#define LAYER_DATUM								155
//Routing objects
#define NAME_ROUTING_OBJECT						"ROUTING OBJECT"
#define DESCRIPTION_ROUTING_OBJECT				"Layers for routing objects"
#define LAYER_ROUTING_OBJECT					156
//Curve&Point
#define NAME_CURVE_POINT						"CURVE and POINT"
#define DESCRIPTION_CURVE_POINT					"Layers for curve and points"
#define LAYER_CURVE_POINT						157
//Sketch
#define NAME_SKETCH								"SKETCH"
#define DESCRIPTION_SKETCH						"Layers for sketch"
#define LAYER_SKETCH							158
//Centerline
#define NAME_CENTERLINE							"CENTERLINE"
#define DESCRIPTION_CENTERLINE					"Layers for centerline"
#define LAYER_CENTERLINE						159
//Section line
#define NAME_SECTION_LINE						"SECTION LINE"
#define DESCRIPTION_SECTION_LINE				"Layers for section line"
#define LAYER_SECTION_LINE						247
//Balloon
#define NAME_BALLOON							"BALLOON"
#define DESCRIPTION_BALLOON						"Layers for balloon"
#define LAYER_BALLOON							248
//Dimension
#define NAME_DIMENSION							"DIMENSION"
#define DESCRIPTION_DIMENSION					"Layers for dimension"
#define LAYER_DIMENSION							249
//Ecav bubble
#define NAME_ECAV_BUBBLE						"ECAV BUBBLE"
#define DESCRIPTION_ECAV_BUBBLEN				"Layers for ecav bubble"
#define LAYER_ECAV_BUBBLE						250
//Note&Label
#define NAME_NOTE_LABEL							"NOTE and LABEL"
#define DESCRIPTION_NOTE_LABEL					"Layers for note and label"
#define LAYER_NOTE_LABEL						251
//GD&T
#define NAME_GDT								"GDT"
#define DESCRIPTION_GDT							"Layers for GDT"
#define LAYER_GDT								252
//Welding symbol
#define NAME_WELDING_SYMBOL						"WELDING SYMBOL"
#define DESCRIPTION_WELDING_SYMBOL				"Layers for welding symbol"
#define LAYER_WELDING_SYMBOL					253
//CTQ
#define NAME_CTQ								"CTQ"
#define DESCRIPTION_CTQ							"Layers for CTQ"
#define LAYER_CTQ								254
//Formate
#define NAME_FORMATE							"FORMATE"
#define DESCRIPTION_FORMATE						"Layers for formate"
#define LAYER_FORMATE							255
//Non-assocaited dimension
#define NAME_NON_ASSOCIATED_DIMENSION			"NON-ASSOCIATED DIMENSION"
#define DESCRIPTION_NON_ASSOCIATED_DIMENSION	"Layers for non-assocaited dimension"
#define LAYER_NON_ASSOCIATED_DIMENSION			256


//------------------------------------------------------------------------------
// Namespaces needed for following template
//------------------------------------------------------------------------------
using namespace std;
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

class DllExport Layer_manager
{
    // class members
public:
    static Session *theSession;
    static UI *theUI;
    Layer_manager();
    ~Layer_manager();
    int Show();
    void RegisterWithMenu();
    
    //----------------------- BlockStyler Callback Prototypes ---------------------
    // The following member function prototypes define the callbacks 
    // specified in your BlockStyler dialog.  The empty implementation
    // of these prototypes is provided in the Layer_manager.cpp file. 
    // You are REQUIRED to write the implementation for these functions.
    //------------------------------------------------------------------------------
    void initialize_cb();
    void dialogShown_cb();
    int apply_cb();
    int ok_cb();
    int update_cb(NXOpen::BlockStyler::UIBlock* block);
    bool enableOKButton_cb();
	void Splite(string input_str, char* symbol, vector<string>& output_str);
	void TcharToChar(const TCHAR * tchar, char * _char);
    PropertyList* GetBlockProperties(const char *blockID);
    
private:
    const char* theDlxFileName;
    NXOpen::BlockStyler::BlockDialog* theDialog;
    NXOpen::BlockStyler::Group* group0;// Block type: Group
    NXOpen::BlockStyler::Button* button0;// Block type: Button
    NXOpen::BlockStyler::Button* button01;// Block type: Button

	bool classification_done;
    
};
#endif //LAYER_MANAGER_H_INCLUDED
